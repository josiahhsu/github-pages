pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
#include shared/gridhelpers.p8

function _init()
	cls()
	
	// grid size
	m,n = 16,13
	set_grid(make_grid(),true)
	
	// player position and note
	px,py,pn = 1,1,0
	
	tempo = 5
	
	t = 0
	state = edit_state()
end

function _update()
	controls()
	state.update()
end

function _draw()
	draw_grid()
	state.draw()
end
-->8
function make_cell()
	//makes a cell and determines
	//whether it's marked or not
	local cell = {}
	cell.spr = -1
	return cell
end

function shuffle(t)
	for i = 1, #t do
		local j = rand_int(i)
		t[i],t[j] = t[j],t[i]
	end
end

function make_grid()
	local grid = {}
	for i = 1, m do
		grid[i] = {}
		for j = 1, n do
			grid[i][j] = make_cell()
		end
	end
	return grid
end
-->8
function controls()
	//player controls for movement
	//and revealing cells
	if btnp(‚¨ÖÔ∏è) then
		move_horz(-1)
	elseif btnp(‚û°Ô∏è) then
		move_horz(1)
	elseif btnp(‚¨ÜÔ∏è) then
		move_vert(-1)
	elseif btnp(‚¨áÔ∏è) then
		move_vert(1)
	end

	if btnp(üÖæÔ∏è) then
		state.o()
	elseif btnp(‚ùé) then
		state.x()
	end
end

function move_horz(dx)
	if in_bounds_x(px+dx) then
		px += dx
	end
end

function move_vert(dy)
	if in_bounds_y(py+dy) then
		py += dy
	end
end
-->8
function coords(x,y)
	//translates value to partial
	//position on grid
	return (x-1)*7+2,y*7
end

function draw_grid()
	rectfill(0,0,126,128,1)
	cell_do_all(
	function(x,y)
		//draws cells on grid
		spr(16, coords(x,y))
		spr(get_cell(x,y).spr,coords(x,y))
	end
	)
end

function draw_pointer()
	//draws pointer position
	local x,y = coords(px,py)
	rect(x,y,x+7,y+7,9)
end

-->8
function edit_state()
	// before start of game
	local s = {}

	function s.update() end

	function s.draw()
		print("‚¨ÜÔ∏è",13,104,7)
		print("‚¨ÖÔ∏è‚¨áÔ∏è‚û°Ô∏è",5,110,7)
		print("to move",3,116,7)
		print("üÖæÔ∏è to place note",38,104,7)
		print("‚ùé to play",38,111,7)
		draw_pointer()
	end

	function s.o()
		local cell = get_cell(px,py)
		if cell.spr == pn then
			cell.spr = -1
		else
			cell_do_lane(px,false,
			function(x,y)
				local cell = get_cell(x,y)
				if cell.spr == pn then
					cell.spr = -1
				end
			end)
			cell.spr = pn
			sfx(pn,-1,13-py,1)
		end
	end

	function s.x()
		t = tempo
		state = play_state()
	end

	return s
end

function play_state()
	local s = {}
	
	function s.update()
		if t % tempo == 0 then
		cell_do_lane(t\tempo,false,
			function(x,y)
				local n = get_cell(x,y).spr
				if n >= 0 then
					sfx(n,-1,13-y,1)
				end
			end
			)
		end
		
		t+=1
		
		if t == (m+1) * tempo then
			state = edit_state()
		end
	end
	
	function s.draw()
		print("‚ùé to stop",38,111,7)
		local offset = ((t\tempo)-1)*7
		rect(2+offset,7,9+offset,98,9)
	end

	function s.o() end

	function s.x()
		state = edit_state()
	end
	
	return s
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00055000000550000005500000055000000550000005500000055000000550000000000000000000000000000000000000000000000000000000000000000000
0058850000599500005aa500005bb500005cc500005dd500005ee500005ff5000000000000000000000000000000000000000000000000000000000000000000
0058850000599500005aa500005bb500005cc500005dd500005ee500005ff5000000000000000000000000000000000000000000000000000000000000000000
00055000000550000005500000055000000550000005500000055000000550000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
56666665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
56666665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
56666665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
56666665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
56666665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
56666665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
011200000c0500d0500e0500f050100501105012050130501405015050160501705018050190501a0501b0501c0501d0501e0501f050200502105022050230502405000000000000000000000000000000000000
011200000c1500d1500e1500f150101501115012150131501415015150161501715018150191501a1501b1501c1501d1501e1501f150201502115022150231502415000100001000010000100001000010000100
011200000c2500d2500e2500f250102501125012250132501425015250162501725018250192501a2501b2501c2501d2501e2501f250202502125022250232502425000200002000020000200002000020000200
011200000c3500d3500e3500f350103501135012350133501435015350163501735018350193501a3501b3501c3501d3501e3501f350203502135022350233502435000300003000030000300003000030000300
011200000c4500d4500e4500f450104501145012450134501445015450164501745018450194501a4501b4501c4501d4501e4501f450204502145022450234502445000400004000040000400004000040000400
011200000c5500d5500e5500f550105501155012550135501455015550165501755018550195501a5501b5501c5501d5501e5501f550205502155022550235502455000500005000050000500005000050000500
011200000c6500d6500e6500f650106501165012650136501465015650166501765018650196501a6501b6501c6501d6501e6501f650206502165022650236502465000600006000060000600006000060000600
001200000c7500d7500e7500f750107501175012750137501475015750167501775018750197501a7501b7501c7501d7501e7501f750207502175022750237502475000700007000070000700007000070000700
